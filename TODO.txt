my role IO::Handle {
    method readline(--> blob8:D) {
        my $buf := buf8.allocate(self.LOAD-LINE);
        self.CONSUME-BYTES($buf);
    }

    method write(blob8:D $bytes --> True) { die }
    method getbyte(--> uint8) { die }
    method putbyte(uint8 $byte --> True) { die }

    method unireadall(--> Uni:D) {
        self.ENCODING.decode(self.READALL);
    }

    method uniwrite(Uni:D $uni --> True) { die }
    method uniget(--> Uni:D) { die }
    method unigetc(--> uint32) { die }
    method uniput(Uni:D $uni --> True) { die }
    method uniputc(uint32 $cp --> True) { die }

    method readchars(UInt:D $n --> Str:D) { die }

    method readallchars(--> Str:D) {
        nqp::strfromcodes(self.unireadall);
    }

    method print(Str:D $str --> True) { die }
    method print-nl(--> True) { die  }
    method get(--> Str:D) { die }
    method getc(--> Str:D) { die }
    method put(Str:D $str --> True) { die }
}

my class IO::BufferedOsHandle is IO::OsHandle {
    method READALL {
        my uint $have = self.AVAILABLE-BYTES;
        my uint $rest = self.GET-SIZE - self.GET-POS;
        my uint $all = $have + $rest;
        my $buf := buf8.allocate($all);
        newio_copy($buf, $!bytes, 0, 0, $have);
        my int64 $rv = newio_read($.fd, $buf, $have, $rest);
        die X::IO.new(os-error => newio_errormsg($rv)) if $rv < 0;
        die X::IO.new(os-error => 'underflow') if $rv != $rest;
        $buf;
    }

}
