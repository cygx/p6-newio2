my role NewIO::Handle {
    method uniread(UInt:D $n, :$enc! --> Uni:D) {
        my $encoding := encoding $enc;
        my $range := $encoding.bytes-per-code;
        die X::Encoding::VariableLength.new(name => $encoding.^name)
            if $range > 1;

        my uint $unit = $range.max;
        my $buf := self.read($n * $unit);
        my uint $len = $buf.elems;
        die X::Encoding::PartialInput.new
            unless $len %% $unit;

        my uint $count = $len div $unit;
        my $uni := nqp::create(Uni);
        nqp::setelems($uni, $count);

        $encoding.decode($uni, $buf, my uint $, my uint $, $count);
        $uni;
    }
}

my role NewIO::BufferedHandle {
    my constant BLOCKSIZE = 512;

    sub round-to-block(uint $n, uint $s = BLOCKSIZE) {
        (($n + $s - 1) div $s) * $s;
    }

    has $.encoding;
    has buf8 $!buffer = buf8.allocate(BLOCKSIZE);
    has uint $!pos;
    has blob8 $!nl-out;
    has blob8 @!nl-in;

    submethod BUILD(:$enc = Encoding::Utf8) {
        $!encoding = encoding $enc;
        $!nl-out = $!encoding.LF;
        @!nl-in  = $!encoding.CRLF, $!encoding.LF;
    }

    method ENCODING {
        $!encoding;
    }

    method AVAILABLE-BYTES {
        $!pos;
    }

    method CLEAR-BUFFER {
        $!pos = 0;
    }

    method FILL-BUFFER(UInt:D $n --> Nil) {
        if $n > $!pos {
            my uint $size = $!buffer.elems;
            my uint $want = round-to-block $n;
            $!buffer.reallocate($want)
                if $want > $size;

            $!pos = $!pos + self.READ($!buffer, $!pos, $want - $!pos);
        }
    }

    method TAKE-AVAILABLE-BYTES(UInt:D $n --> blob8:D) {
        my uint $count = $n min $!pos;
        my uint $rest = $!pos - $count;

        my $buf := buf8.allocate($count);
        sysio.copy($buf, $!buffer, 0, 0, $count);
        sysio.move($!buffer, $!buffer, 0, $count, $rest)
            if $rest > 0;

        $!pos = $rest;
        $buf;
    }

    method TAKE-AVAILABLE-CODES(UInt:D $n --> Uni:D) {
        my $enc := self.ENCODING;
        my uint $count = $n min ($!pos div $enc.bytes-per-code.min);

        my $uni := nqp::create(Uni);
        nqp::setelems($uni, $count);

        my uint $dstpos;
        my uint $srcpos;

        $enc.decode($uni, $!buffer, $dstpos, $srcpos, $count);
        nqp::setelems($uni, $dstpos);

        my uint $rest = $!pos - $srcpos;
        sysio.move($!buffer, $!buffer, 0, $srcpos, $rest) if $rest > 0;
        $!pos = $rest;

        $uni;
    }

    multi method seek(UInt:D $pos --> True) {
        self.SET-POS($pos);
        self.CLEAR-BUFFER;
    }

    multi method seek(WhateverCode $pos --> True) {
        self.SET-POS-FROM-END($pos(0));
        self.CLEAR-BUFFER;
    }

    method skip(Int:D $offset is copy --> True) {
        when $offset == 0 {}
        when 0 < $offset <= self.AVAILABLE-BYTES {
            self.SHIFT-BUFFER($offset);
        }
        default {
            self.SET-POS-FROM-CURRENT($offset - self.AVAILABLE-BYTES);
            self.CLEAR-BUFFER;
        }
    }

    method tell(--> UInt:D) {
        self.GET-POS - self.AVAILABLE-BYTES;
    }

    method read(UInt:D $n --> blob8:D) {
        self.FILL-BUFFER($n);
        self.TAKE-AVAILABLE-BYTES($n);
    }

    method uniread(UInt:D $n --> Uni:D) {
        self.FILL-BUFFER($n * self.ENCODING.bytes-per-code.max);
        self.TAKE-AVAILABLE-CODES($n);
    }
}

my role NewIO::StreamingHandle {
    method skip(Int:D $offset --> True) {
        when $offset < 0 {
            self.NOT-SUPPORTED('cannot rewind a stream');
        }
        when $offset == 0 {}
        when 0 < $offset <= self.AVAILABLE-BYTES {
            self.SHIFT-BUFFER($offset);
        }
        default {
            self.SET-POS-FROM-CURRENT($offset - self.AVAILABLE-BYTES);
            self.CLEAR-BUFFER;
        }
    }
}

---

my role IO::Handle {
    method readline(--> blob8:D) {
        my $buf := buf8.allocate(self.LOAD-LINE);
        self.CONSUME-BYTES($buf);
    }

    method write(blob8:D $bytes --> True) { die }
    method getbyte(--> uint8) { die }
    method putbyte(uint8 $byte --> True) { die }

    method unireadall(--> Uni:D) {
        self.ENCODING.decode(self.READALL);
    }

    method uniwrite(Uni:D $uni --> True) { die }
    method uniget(--> Uni:D) { die }
    method unigetc(--> uint32) { die }
    method uniput(Uni:D $uni --> True) { die }
    method uniputc(uint32 $cp --> True) { die }

    method readchars(UInt:D $n --> Str:D) { die }

    method readallchars(--> Str:D) {
        nqp::strfromcodes(self.unireadall);
    }

    method print(Str:D $str --> True) { die }
    method print-nl(--> True) { die  }
    method get(--> Str:D) { die }
    method getc(--> Str:D) { die }
    method put(Str:D $str --> True) { die }
}

my role IO[IO::Handle:U \HANDLE] {
    method open(--> IO::Handle:D) {
        HANDLE.new(io => self, |%_);
    }

    proto method slurp {*}
    multi method slurp(:$bin! --> blob8:D) {
        my \handle = self.open(|%_);
        LEAVE handle.close;
        handle.readall;
    }
    multi method slurp(:$uni! --> Uni:D) {
        my \handle = self.open(|%_);
        LEAVE handle.close;
        handle.unireadall;
    }
    multi method slurp(--> Str:D) {
        my \handle = self.open(|%_);
        LEAVE handle.close;
        handle.readallchars;
    }
}

my class IO::BufferedOsHandle is IO::OsHandle {
    has $!bytes = buf8.allocate(BLOCKSIZE);
    has uint $!pos;
    has $.encoding;

    submethod BUILD(:$enc = Encoding::Utf8) {
        $!encoding = do given $enc {
            when Encoding { $enc }
            when %ENCODINGS{$enc}:exists { %ENCODINGS{$enc} }
            default { die "unsupported encoding '$enc'" }
        }
    }

    method ENCODING { $!encoding }

    method READALL {
        my uint $have = self.AVAILABLE-BYTES;
        my uint $rest = self.GET-SIZE - self.GET-POS;
        my uint $all = $have + $rest;
        my $buf := buf8.allocate($all);
        newio_copy($buf, $!bytes, 0, 0, $have);
        my int64 $rv = newio_read($.fd, $buf, $have, $rest);
        die X::IO.new(os-error => newio_errormsg($rv)) if $rv < 0;
        die X::IO.new(os-error => 'underflow') if $rv != $rest;
        $buf;
    }

}
